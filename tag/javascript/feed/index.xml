<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>javascript</title>
	<atom:link href="/tag/javascript/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Geology, Maps, and Code</description>
	<lastBuildDate>Wed, 06 Jun 2018 07:43:11 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2017/02/cropped-JustinGosses_logo-32x32.jpg</url>
	<title>javascript</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Shortening the distance between creators and creation in geo-computing</title>
		<link>/shortening-the-distance-between-creators-and-creation/</link>
					<comments>/shortening-the-distance-between-creators-and-creation/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Mon, 04 Jun 2018 04:33:51 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[geology]]></category>
		<category><![CDATA[Bret Victor]]></category>
		<category><![CDATA[Geology]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[wellio.js]]></category>
		<category><![CDATA[widget]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=1066</guid>

					<description><![CDATA[Inspiration Bret Victor is a well known thinker on the future and possibilities of human &#8211; computer interface. His website contains a variety of thought provoking projects, and his talks have inspired many other works. Currently, he&#8217;s leading development of Dynamicland, a new way of interacting with and creating computer<a class="moretag" href="/shortening-the-distance-between-creators-and-creation/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<h3>Inspiration</h3>
<p><a href="https://en.wikipedia.org/wiki/Bret_Victor">Bret Victor</a> is a well known thinker on the future and possibilities of human &#8211; computer interface. <em>His <a href="http://worrydream.com/">website</a> contains a variety of thought provoking projects, and his talks have inspired many other <a href="https://hacks.mozilla.org/2012/04/bret-victors-inventing-on-principle-and-a-few-things-it-inspired/">works</a>.</em></p>
<p>Currently, he&#8217;s leading development of <a href="https://dynamicland.org/">Dynamicland</a>, a new way of interacting with and creating computer programs that involves image recognition, paper, and projectors. The best way to understand it is by watching <a href="https://twitter.com/dynamicland1?lang=en">videos of people using it</a>.</p>
<p>In one of his most well known talks &#8220;<a href="https://www.youtube.com/watch?v=PUv66718DII">Inventing on Principle</a>&#8221; he discusses his principle that <em><strong>&#8220;creators need an immediate connection to what they create&#8221;</strong></em>. <span style="text-align: center;">Although it can be interpreted as a call to create completely new ways for interacting with computers, like in </span><a style="text-align: center;" href="https://dynamicland.org/">Dynamicland</a><span style="text-align: center;">, or creating reactive programming interfaces with more immediate feedback, like Nicky Case&#8217;s <a href="http://ncase.me/joy/">joy.js</a>, we can also read this as an encouragement to look for more incremental improvements that shorten the distance between creator and what they create. </span><strong style="text-align: center;">I think the incremental version of this concept is illustrative in regards to what open-source side products people might work on in geo-computing. </strong></p>
<h3>State of things</h3>
<p>I previously worked for nine years in the oil and gas industry. Most oil and gas software is a collection of clicks and drop-down menus. Sometimes the steps users follow are not too different from the original process done with paper and pencil. Although I no longer work with that type of data professionally, I still play with geoscience data via side projects. I leverage open-source libraries and although they are more flexible, I&#8217;ve sometimes found myself struggling to quickly try different things, visualize the result, and iterate. Too often I have to re-type code, hit return, repeat and see the result. Additionally, getting geoscience data into open-source software built for other types of data at times feels either hacky or too great a leap. This is especially true in JavaScript where, I would argue, most of the current amazing new things in data visualization tend to occur but few geoscientists venture, as they tend to stay to Python. In all of these cases, the distance between creator and creation is a bit larger than it could be, which makes exploring hypothesis spaces slow. This slowness limits what you can or might end up doing.</p>
<blockquote>
<p style="text-align: center;"><em>How can we shrink the distance between creator and creation in geo-computing?</em></p>
<p>&nbsp;</p></blockquote>
<p>I often see two ways.</p>
<p><em>First</em>, we can make it easier to leverage the wide variety of open-source libraries when working with geoscience data, <em><strong>a glue and adapter approach</strong>.</em> Too often getting data into the right form is either slow and hacky or simply doesn&#8217;t exist. Small tools that solve common problems.</p>
<p><em>Second</em>, we can make it easier to do many iterations quickly, <strong><em>a widgetization approach</em></strong>. Specifically, iterate more through mouse movements and other inputs that are continuous more and iterate less through discrete inputs like typing, clicking, or recalculating. This makes it faster and more enjoyable to explore a hypothesis space and stumble onto different ways to visualize raw data in aggregate or other form.</p>
<h2>Glue &amp; adapters</h2>
<p>Working with geoscience data in any open-source library requires getting the data in. This is less of a problem in analytics focused Python libraries like SciPy and Pandas, in part because people have built great tools like <a href="https://github.com/Statoil/segyio">SEGYIO (seismic)</a>, <a href="https://github.com/kinverarity1/lasio">LASIO</a> (well logs), and <a href="https://github.com/agile-geoscience/welly">WELLY</a> (well logs). Adapters and glue libraries in JavaScript are more lacking. This is understandable as most scientists learn Python, for <a href="https://www.researchgate.net/journal/0885-7156_Powder_Diffraction">good reasons</a>, but unfortunate because many of the cool new projects in data visualization are written in JavaScript, as that&#8217;s the language of the web. To give an example of the limitations, I can&#8217;t find a library for loading and displaying seismic in HTML, CSS, JavaScript that is open-source. This isn&#8217;t because it isn&#8217;t possible to do. <a href="https://info.drillinginfo.com/seismic-analysis-drillinginfo-acquired-transform-software/">Several</a> <a href="https://www.int.com/products/geotoolkit/">companies</a> offer seismic web visualization as part off their cloud services. It is either that no one has made an open-source version, or it isn&#8217;t used much so is hard to find.</p>
<h4>Wellio.js</h4>
<p>As an example of trying to fill this glue and adapter gap for getting well log data to be easily usable in JavaScript data visualization libraries, I&#8217;ve started <a href="https://github.com/JustinGOSSES/wellio.js">Wellio.js</a> as a side project. Wellio.js is both a front-end and back-end (node.js) JavaScript library. It takes in native well log files in LAS 2.0 format and transforms them to <a href="https://en.wikipedia.org/wiki/JSON">JSON</a> format, which JavaScript libraries can read.</p>
<p>Some libraries and tasks that now become easier include:</p>
<ul>
<li><a href="https://github.com/d3/d3/wiki/gallery">D3.js</a>
<ul>
<li>One of the most popular data visualization libraries, it lets you access lower level control so can make pretty much <a href="https://github.com/d3/d3/wiki/gallery">anything.</a></li>
</ul>
</li>
<li><a href="https://vega.github.io/vega/">Vega.js</a>
<ul>
<li>Sorta like d3.js but based on a visualization grammar. You trade some power and flexibility for speed and ease of use.</li>
</ul>
</li>
<li><a href="https://threejs.org/">Three.js</a>
<ul>
<li>Arguably the current standard for quickly making three-dimensional content on the web. You can go in a million directions with it and people <a href="https://threejs.org/examples/#webgl_camera_cinematic">do</a>.</li>
</ul>
</li>
<li><a href="https://github.com/jeromeetienne/AR.js/blob/master/README.md">AR.js</a>
<ul>
<li>Augmented reality without an app or headset, just your browser and your regular smart phone.</li>
</ul>
</li>
</ul>
<p>So what could you do with seismic or well data with the libraries above? With d3.js you can replicate just about any traditional visualization of well log data. <a href="https://github.com/agile-geoscience/g3">G3.js</a> is a partially completed library but still pretty cool library that attempts this. The Wellio.js github page has <a href="https://justingosses.github.io/wellio.js/">a demo that uses g3.js.</a> One of the advantages of using JavaScript is all the computation can be done client side. This means you can upload to a web application your own well logs to be visualized or analyzed and no data gets sent to a cloud server, it all stays in your browser. Additionally, you don&#8217;t have to install any software or code.</p>
<p>With vega.js, wellio.js, and ObservableHQ you can then quickly &amp; interactively <a href="https://beta.observablehq.com/@justingosses/spearman-correlation-coefficient-using-i-spearmanrho-i">visualize</a> &amp; <a href="https://beta.observablehq.com/@justingosses/spearman-correlation-coefficient-using-i-spearmanrho-i">analyze</a> well curves in the browser and write little bits of code to interactively try new things. Here is <a href="https://beta.observablehq.com/@justingosses/spearman-correlation-coefficient-using-i-spearmanrho-i">an example</a> that plays around with the spearman&#8217;s correlation coefficient.</p>
<div id="attachment_1102" style="width: 650px" class="wp-caption aligncenter"><a href="https://beta.observablehq.com/@justingosses/three-js-well-log-demo-geology"><img aria-describedby="caption-attachment-1102" loading="lazy" class="wp-image-1102 size-large" src="http://54.87.153.110/wp-content/uploads/2018/06/Screen-Shot-2018-06-03-at-11.38.55-PM-1024x731.png" alt="3D well logs in three.js" width="640" height="457" srcset="/wp-content/uploads/2018/06/Screen-Shot-2018-06-03-at-11.38.55-PM-1024x731.png 1024w, /wp-content/uploads/2018/06/Screen-Shot-2018-06-03-at-11.38.55-PM-300x214.png 300w, /wp-content/uploads/2018/06/Screen-Shot-2018-06-03-at-11.38.55-PM-768x549.png 768w, /wp-content/uploads/2018/06/Screen-Shot-2018-06-03-at-11.38.55-PM.png 1890w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-1102" class="wp-caption-text">3D well logs in three.js</p></div>
<p>Once well log data is in JSON, it becomes easy to work with it in <a href="https://threejs.org/">three.js</a> to make <a href="https://beta.observablehq.com/@justingosses/three-js-well-log-demo-geology">3D visualizations as shown in this basic example</a> on Observable that you can edit and change.</p>
<p>AR.js is a library I have some experience with in the augmented reality space. I&#8217;ve used it to create <a href="https://twitter.com/JustinGosses/status/848636777028096001">an Augmented Reality business card with a 3D depiction of Gale Crater on Mars</a>. AR.js can use three dimensional visualizations created in three.js. As shown above, we can visualize well logs in three.js after converting the well logs LAS 2.0 formatted file into JSON. There is nothing stopping us from having a paper map with symbols on it that bring up augmented reality well logs and surfaces such that we could look at the subsurface in field using only a paper map and the cell phone you already have in your pocket.</p>
<h2>Widgetization</h2>
<p>How do we make exploring hypothesis spaces faster and easier and less constrained with widgets? I&#8217;ll start off by saying I&#8217;m not entirely satisfied with any of the solutions out there. The level of immediate feedback depicted in <a href="https://www.youtube.com/watch?v=PUv66718DII">this Bret Victor video</a> with the programmatically drawn tree is hard to get to and still be flexible enough to tackle a different problem quickly. Generally the approaches to these types of problems describe themselves as either a GUI (graphic user interface) library, a widget library, or a reactive computer library or language. GUIs are all about building a graphic user interface for the end-user where code is probably not exposed. Widgets are sliders, buttons, wheels, and other sorts of graphical conventions that users can use to quickly change a variable&#8217;s value across a continuous range. Reactive libraries like <a href="http://ncase.me/joy/">joy.js</a> attempt to mimic some of the magic depicted in Bret Victor&#8217;s talk while flexible enough to allow people to build their own.</p>
<h4>Example tools for widgetization:</h4>
<ul>
<li><a href="https://beta.observablehq.com/collection/explorables">ObservableHQ (webpage that executes end-user-typed JavaScript in real time inside notebook like enviornment)</a></li>
<li><a href="http://ipywidgets.readthedocs.io/en/stable/user_guide.html">Jupyter Widgets (widget add-on for Jupyter notebooks)</a></li>
<li><a href="https://bokeh.pydata.org/en/latest/docs/user_guide/interaction/widgets.html">Bokeh Widgets (Like Jupyter widgets but for Python Bokeh data visualization library)</a></li>
<li><a href="https://wiki.python.org/moin/Intro%20to%20programming%20with%20Python%20and%20Tkinter">TKinter (Old school but still works GUI builder for Python)</a></li>
<li><a href="https://wxpython.org/pages/overview/">WXpython </a><a href="https://wiki.python.org/moin/Intro%20to%20programming%20with%20Python%20and%20Tkinter">(Old school but still works GUI builder for Python)</a></li>
<li><a href="https://idyll-lang.org/gallery">Idyll-lang(JavaScript library, for explorable explanations)</a></li>
<li><a href="http://ncase.me/joy/">Joy.js (reactive style JavaScript Library, the closest to Bret Victor flower demo)</a></li>
</ul>
<h4>Two Small Examples</h4>
<p>Examples of some experiments I&#8217;ve done recently in ObservableHQ with a little widgetization include <a href="https://beta.observablehq.com/@justingosses/spearman-correlation-coefficient-using-i-spearmanrho-i">this quick demo of well logs and a correlation coefficient </a> and this experiment in <a href="https://beta.observablehq.com/@justingosses/1st-try-converting-well-log-data-into-audio-not-very-success">sonifying well logs</a>.</p>
<h4>Example of a widget-ed data visualization I want that doesn&#8217;t exist yet:</h4>
<p>There&#8217;s a widget I&#8217;ve been wanting but haven&#8217;t built yet. It would be useful for machine-learning predictions of either stratigraphic surfaces or facies. I would like to have a function that creates a new feature from original features along a well bore. All the variables in the function would be draggable widgets like in <a href="http://ncase.me/joy/demo/nonlinear/">this</a> joy.js example. There would be immediate linkage between this function and several other visualization on the page, similar to how <a href="https://dc-js.github.io/dc.js/">dc.js works</a>. One would be a <a href="https://www.spec2000.net/01-beginnersguide.htm">typical vertical well curve visualization</a>. The other a scatter plot with points colored by label class. Labels might be facies or at &#8220;pick&#8221;, &#8220;near pick&#8221;, and &#8220;away from pick&#8221;. Lastly, there would be a random forest tree visualized as a tree of links and nodes. I would be able to select all the data downstream of a specific node and use that data in the visualizations. Both the well curve plot and the scatter plot would be <a href="https://www.visualcinnamon.com/2016/07/brush-bar-chart-d3.html">brushable</a>, meaning data selected in one visualization is highlighted in the others. I think this type setup, where you can immediately see the effect of different choices in your feature creation function on how labels are clustered could greatly speed up the process of engineering effective features as a replacement for all the different types of observations we make when we look at a log.</p>
<h4>And now for something completely different: Alternative Means of User Input?</h4>
<p><a href="http://54.87.153.110/wp-content/uploads/2018/06/KinectPottery.jpg"><img loading="lazy" class="wp-image-1101 size-medium alignleft" src="http://54.87.153.110/wp-content/uploads/2018/06/KinectPottery-225x300.jpg" alt="KinectPottery" width="225" height="300" srcset="/wp-content/uploads/2018/06/KinectPottery-225x300.jpg 225w, /wp-content/uploads/2018/06/KinectPottery-768x1024.jpg 768w, /wp-content/uploads/2018/06/KinectPottery.jpg 900w" sizes="(max-width: 225px) 100vw, 225px" /></a></p>
<p>Another way to make user input and exploration continuous instead of discrete and get real-time feedback, is to change the means of input away from mouse and keyword entirely. This is related to widgetization but maybe another step down the line? In <a href="https://twitter.com/JustinGosses/status/999417519877312512">the</a> image above taken at the Cleveland Museum of Art, a user is molding a digital representation of clay with their hands. Could the same technique work for salt bodies in 3D seismic? Clicking takes a lot of time for seismic interpretation and has health and safety implications. Why not drawing? I can draw lines over seismic with a digital pen significantly better than I can with a mouse click hold. Kinect cameras capture 3D surfaces and create digital topography on a small human scale. A popular geoscience education use of Kinect cameras is an <a href="https://arsandbox.ucdavis.edu/">augmented reality sandboxes</a>. Can kinect&#8217;s be used for input into technical problems too? Additionally <a href="https://webgazer.cs.brown.edu/">eye tracking</a> and <a href="https://github.com/CMU-Perceptual-Computing-Lab/openpose">body tracking</a> technology that leverage machine-learning is getting good enough to start considering practical use. Are there use-cases where these types of inputs are preferred or could be used in addition to mouse clicking?</p>
<h3></h3>
<h3>Conclusion</h3>
<p>I&#8217;m not Bret Victor, and you&#8217;re probably not either (if you&#8217;re actually Bret Victor, hi). Although creating things at his level is inspiring, it is also difficult. Aiming for a little in that direction, however, is perhaps instructive in terms of identifying  opportunities to make something cool and even potentially useful.</p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/shortening-the-distance-between-creators-and-creation/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Presenting at Johnson Space Center Data Science Day</title>
		<link>/presenting-at-johnson-space-center-data-science-day/</link>
					<comments>/presenting-at-johnson-space-center-data-science-day/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Fri, 28 Apr 2017 22:41:52 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[Javascript library]]></category>
		<category><![CDATA[NASA]]></category>
		<category><![CDATA[reveal.js]]></category>
		<category><![CDATA[talk]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=861</guid>

					<description><![CDATA[This week I presented on the last 40 years of digital data visualization tools at Johnson Space Center Data Science Day. The event was held just off site this year, so it could be opened up to the public. The talk was a condensed, and I think improved, version of a<a class="moretag" href="/presenting-at-johnson-space-center-data-science-day/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<p>This week I presented on the last 40 years of digital data visualization tools at <a href="https://fal.jsc.nasa.gov/DSD/">Johnson Space Center Data Science Day</a>. The event was held just off site this year, so it could be opened up to the public. The talk was a condensed, and I think improved, version of a talk I had previous gave at a data visualization meet-up. This version was shorter by half and focused just on the tool evolution, as opposed to the previous talk which tried to also cover the context of these tools in large organizations.</p>
<p><iframe loading="lazy" src="//slides.com/justingosses/history_data_visualization_tools/embed" width="800" height="460" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></p>
<p style="text-align: center;"><a href="http://slides.com/justingosses/history_data_visualization_tools">click to view as a full window on a new tab</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/presenting-at-johnson-space-center-data-science-day/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Meet Up Talk Data Viz Tools</title>
		<link>/talk-on-changing-landscape-of-data-viz-tools/</link>
					<comments>/talk-on-changing-landscape-of-data-viz-tools/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Tue, 22 Nov 2016 04:02:11 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[business intelligence]]></category>
		<category><![CDATA[Chart.js]]></category>
		<category><![CDATA[d3.js]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[excel]]></category>
		<category><![CDATA[Flot.js]]></category>
		<category><![CDATA[history]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[lotus 1-2-3]]></category>
		<category><![CDATA[meet-up]]></category>
		<category><![CDATA[presentation]]></category>
		<category><![CDATA[reveal.js]]></category>
		<category><![CDATA[SAS]]></category>
		<category><![CDATA[slides.com]]></category>
		<category><![CDATA[spreadsheet]]></category>
		<category><![CDATA[Tableau]]></category>
		<category><![CDATA[timeline.js]]></category>
		<category><![CDATA[visicalc]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=768</guid>

					<description><![CDATA[&#8220;THE CHANGING LANDSCAPE OF DATA VISUALIZATION TOOLS IN LARGE ORGANIZATIONS&#8221; I recently gave a talk at the Houston Data Visualization meet-up. In addition to being a good excuse for putting time on my calendar to research the evolution of data visualization tools over the past 40 years, the talk allowed me<a class="moretag" href="/talk-on-changing-landscape-of-data-viz-tools/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<h3>&#8220;THE CHANGING LANDSCAPE OF DATA VISUALIZATION TOOLS IN LARGE ORGANIZATIONS&#8221;</h3>
<p>I recently gave a talk at the <a href="https://www.meetup.com/Houston-Data-Visualization-Meetup/events/233893631/">Houston Data Visualization meet-up</a>. In addition to being a good excuse for putting time on my calendar to research the evolution of data visualization tools over the past 40 years, the talk allowed me to try out a few presentation related tools. <a href="https://github.com/hakimel/reveal.js/" target="blank">Reveal.js</a> is a user friendly framework for making presentations that consist of html, css, and JavaScript, just like any normal webpage. <a href="https://slides.com/" target="blank">Slides.com</a> is a hosting and GUI site for reveal.js slides. One of the best features of slides.com was being able to control the slides on my computer via my phone. This enabled me to walk around and not be as tied to my computer or rely on someone else to advance the slides. It also provides a nice way to briefly look down as you flip slides and sneak a glance at speakers notes. I used <a href="https://timeline.knightlab.com/" target="blank">timeline.js</a> from the <a href="https://knightlab.northwestern.edu/" target="blank">Knight Lab</a> at Northwestern university to create a timeline of key tool development that I referred to several times during the talk.</p>
<p>All the data for the presentation is in <a href="https://github.com/JustinGOSSES/talk_HistDVTools" target="blank"> this</a> github repo. I hope to revisit this presentation to take a second stab at it or perhaps turn it into a series of blog posts for work.</p>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//slides.com/justingosses/dataviztoolshistorylargeorg/embed" width="800" height="460" frameborder="0" scrolling="no" allowfullscreen="allowfullscreen"></iframe></p>
<p style="text-align: center;"><a href="http://slides.com/justingosses/dataviztoolshistorylargeorg#/">click to view as a full window on a new tab</a></p>
<p><iframe loading="lazy" style="border: 1px solid lightgrey;" src="https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1O32FBDYO16WjoFSCsWS1d0oEuRo0C00q633nhhGZlNE&amp;font=Default&amp;lang=en&amp;initial_zoom=2&amp;height=800" width="800" height="800" scrolling="yes" allowfullscreen="allowfullscreen"></iframe></p>
<p style="text-align: center;"><a href="https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1O32FBDYO16WjoFSCsWS1d0oEuRo0C00q633nhhGZlNE&amp;font=Default&amp;lang=en&amp;initial_zoom=2&amp;height=650">click to view as a full window on a new tab</a></p>
]]></content:encoded>
					
					<wfw:commentRss>/talk-on-changing-landscape-of-data-viz-tools/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Game of Thrones Parallel Sets Data Visualization</title>
		<link>/game-of-thrones-parallel-sets-data-visualization/</link>
					<comments>/game-of-thrones-parallel-sets-data-visualization/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Mon, 10 Oct 2016 18:31:19 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[d3]]></category>
		<category><![CDATA[d3.js]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[Front-End]]></category>
		<category><![CDATA[Game of Thrones]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[opendata]]></category>
		<category><![CDATA[web development]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=748</guid>

					<description><![CDATA[User interface add-ons to make a better parallel sets visualizations: (skip to the data visualization here.) Parallel sets is a data visualization type that shows how attributes of different types are distributed across a large number of instances. Common examples include datasets of the characteristics of passengers on the Titanic disaster and nutrition<a class="moretag" href="/game-of-thrones-parallel-sets-data-visualization/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<h2>User interface add-ons to make a better parallel sets visualizations:</h2>
<p style="text-align: center;">(skip to the data visualization <a href="https://54.87.153.110/ParaSet_Oct2/" target="_blank">here</a>.)</p>
<p>Parallel sets is a data visualization type that shows how attributes of different types are distributed across a large number of instances. Common examples include datasets of the characteristics of passengers on the Titanic disaster and nutrition information of many different types of cereal. Parallel sets data visualizations are good at showing how attributes do or don&#8217;t cluster over a large dataset of instances. It is a data visualization type favored when the data is categorical and not strictly numerical.</p>
<p>I built a <a href="https://54.87.153.110/parallel-sets-data-visualization/">parallel sets data visualization</a> based on a dataset of battles from the <a href="https://en.wikipedia.org/wiki/Game_of_Thrones">Game of Thrones series</a> (TV version, not book). Examples questions that can be answered by a <a href="https://54.87.153.110/ParaSet_Oct2/" target="_blank">parallel sets</a> built from this data include: Which battle type has the best success rate? Which house has the best and track record in terms of number of battles won or lost? Were there more pitched battles versus ambushes in later years versus earlier years? Are battles in certain regions more likely to result in a major characters death?</p>
<p>The parallel sets visualizations that I&#8217;ve seen work best when the number of types of attributes is between 3 and 10, the number of different attributes within each type is &lt;10, and the total number of instances is &gt;100.  Outside this range, parallel sets tend to get too cluttered.</p>
<p>When I used parallel sets for a project at work, I found it be successful for the immediate problem but very easy to be cluttered and messy if I tried to include all characteristics found in the dataset. Although a subset of the data was fine for showing what I was interested in at the time, I knew eventually I would want to show a larger dataset and let the user explore the data. This led to brainstorming potential improvements for my initial parallel sets code base, which I had adopted from Jason Davis <a href="https://github.com/jasondavies/d3-parsets" target="_blank">parasets </a>project. Both us d3.js. <span style="color: #333399;">I&#8217;ve completed the first two interactivity improvements listed below in this</span> <a href="https://54.87.153.110/ParaSet_Oct2/" target="_blank">visualization</a>.</p>
<ol>
<li><span style="color: #333399;">User can select which data dimensions to visualize (types of attributes: region, year, defender, etc.)</span></li>
<li><span style="color: #333399;">User can limit the visualization to only data that contains a certain value in a certain dimension (battles with Stark as the defender)</span></li>
<li>User can chose to turn numerical information into small categorical groups (size of battle was &gt; or &lt; some number)<br />
a. user selects n number of divisions of the data between min and max<br />
b. or n number of divisions based on equal number in each category<br />
c. or by log divisions (&gt;10, &gt;100, &gt;1000, etc.)</li>
<li>Interactive combination of histogram and parallel sets data visualizations via dc.js.</li>
<li>Pre-determined combinations of data dimensions available via a series of buttons to assist in story-telling to user.</li>
</ol>
<p>Letting the user select the input data and try different combinations reduces cluttering. Giving the user the option to pick the input data makes this data visualization more of a data exploration tool and less of a straight forward story telling image.</p>
<p>It is also useful if you don&#8217;t have HBO but want to study up for water cooler conversations.</p>
<p>&nbsp;</p>
<h3>Examples from the Game of Thrones Parallel Sets Visualization:</h3>
<p style="text-align: center;"><em>ribbon width = number of battles</em></p>
<div id="attachment_750" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.29.28-PM.png"><img aria-describedby="caption-attachment-750" loading="lazy" class="wp-image-750 size-large" src="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.29.28-PM-1024x713.png" alt="Battles Type Vs. Outcome" width="640" height="446" srcset="/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.29.28-PM-1024x713.png 1024w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.29.28-PM-300x209.png 300w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.29.28-PM.png 2006w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-750" class="wp-caption-text">Battles Type Vs. Outcome</p></div>
<p style="text-align: center;"><em>Ambushes, razing, and siege perform better for the attacker than a pitched battle. </em></p>
<div id="attachment_751" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.36.24-PM.png"><img aria-describedby="caption-attachment-751" loading="lazy" class="wp-image-751 size-large" src="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.36.24-PM-1024x632.png" alt="Who loses battles vs. wins battles." width="640" height="395" srcset="/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.36.24-PM-1024x632.png 1024w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.36.24-PM-300x185.png 300w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.36.24-PM.png 1988w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-751" class="wp-caption-text">Who loses battles vs. wins battles.</p></div>
<p style="text-align: center;"><em>Freefolk (black ribbon) have a horrible track record at attacking. House Stark and Baratheon are also not that great.</em></p>
<div id="attachment_752" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.37.40-PM.png"><img aria-describedby="caption-attachment-752" loading="lazy" class="wp-image-752 size-large" src="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.37.40-PM-1024x644.png" alt="Battles vs. character deaths" width="640" height="403" srcset="/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.37.40-PM-1024x644.png 1024w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.37.40-PM-300x189.png 300w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-12.37.40-PM.png 1964w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-752" class="wp-caption-text">Battles vs. character deaths: 1 = major character death, 0 = no major character death</p></div>
<p><em>Lannister, Stark, and Baratheon have the highest number of battles where they are the main attacker and an important character dies. </em></p>
<div id="attachment_754" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-1.24.35-PM.png"><img aria-describedby="caption-attachment-754" loading="lazy" class="wp-image-754 size-large" src="http://54.87.153.110/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-1.24.35-PM-1024x637.png" alt="Who wins when defending and major character deaths" width="640" height="398" srcset="/wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-1.24.35-PM-1024x637.png 1024w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-1.24.35-PM-300x187.png 300w, /wp-content/uploads/2016/10/Screen-Shot-2016-10-10-at-1.24.35-PM.png 1964w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-754" class="wp-caption-text">Who wins when defending and major character deaths</p></div>
<p style="text-align: center;"><em>The attacker usually wins in a Game of Thrones battle, but when they lose, it tends to be when the main defender is a Lannister. In those battles where a defending Lannister wins, it is also common for a major character of some type to die. </em></p>
<h2 style="text-align: center;">Explore the live data visualization <a href="https://54.87.153.110/ParaSet_Oct2/" target="_blank">here</a>.</h2>
<h2></h2>
]]></content:encoded>
					
					<wfw:commentRss>/game-of-thrones-parallel-sets-data-visualization/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Flow Chart for Picking the Right Mapping Tool</title>
		<link>/flow-chart-for-picking-the-right-mapping-tool/</link>
					<comments>/flow-chart-for-picking-the-right-mapping-tool/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Sat, 03 Sep 2016 19:05:18 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[maps]]></category>
		<category><![CDATA[ArcGIS]]></category>
		<category><![CDATA[CartoDB]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[draw.io]]></category>
		<category><![CDATA[flowcharts]]></category>
		<category><![CDATA[GIS]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[Javascript library]]></category>
		<category><![CDATA[leaflet.js]]></category>
		<category><![CDATA[mapbox]]></category>
		<category><![CDATA[Online Map]]></category>
		<category><![CDATA[Online Mapping]]></category>
		<category><![CDATA[Opinion]]></category>
		<category><![CDATA[python]]></category>
		<category><![CDATA[tools]]></category>
		<category><![CDATA[web development]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=732</guid>

					<description><![CDATA[I did some research on different tools for creating flow charts today. Originally, I started down this path trying to figure out what open-source project I might be able to hack on and produce a project that would generate XKCD style flow charts, similar to how bokeh (python library) has XCKD<a class="moretag" href="/flow-chart-for-picking-the-right-mapping-tool/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<p>I did some research on different tools for creating flow charts today.</p>
<p>Originally, I started down this path trying to figure out what open-source project I might be able to hack on and produce a project that would generate XKCD style flow charts, similar to how bokeh (python library) has XCKD style plots as built-in option. I was also playing around with the notion of crowd-sourced flow charts to help pick among tools and libraries as the number of options explode.</p>
<p>Then I got distracted and made the flow-chart below. I&#8217;ll just leave it here. It was made with <a href="http://draw.io/">draw.io</a></p>
<p>&nbsp;</p>
<div id="wrapper" style="width: 100%; height: 100%; overflow: scroll !important; -webkit-overflow-scrolling: touch;">
<iframe loading="lazy" src="https://54.87.153.110/FlowChart_MakeMaps/" width="100%" height="1200px"></iframe>
</div>
]]></content:encoded>
					
					<wfw:commentRss>/flow-chart-for-picking-the-right-mapping-tool/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Nodebots</title>
		<link>/nodebots/</link>
					<comments>/nodebots/#comments</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Sun, 31 Jul 2016 04:32:26 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[learning]]></category>
		<category><![CDATA[meetup]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[npm]]></category>
		<category><![CDATA[Robots]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=662</guid>

					<description><![CDATA[Today I got to play with hardware at an International Nodebot Day event put on by NodeJS Houston. It was a lot of fun, and I was surprised by how much got accomplished in less than a day. I used a Tessel2 board from Sparkfun, which comes with linux and Node.js<a class="moretag" href="/nodebots/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<p style="text-align: left;">Today I got to play with hardware at an <a href="http://nodebots.io/#nodebots-day">International Nodebot Day</a> event put on by <a href="http://www.nodejshouston.com/">NodeJS Houston</a>. It was a lot of fun, and I was surprised by how much got accomplished in less than a day. I used a <a href="https://tessel.io/">Tessel2</a> board from <a href="https://www.sparkfun.com/nodebots2016">Sparkfun</a>, which comes with linux and Node.js installed. The best thing about the Tessel2 is how quickly you can go from having just parts to having a working project. Unlike the Raspberry Pi and other boards, there is no lengthy initial install process. The OS is pre-installed. The client installs via a single line of code using <a href="https://www.npmjs.com/">NPM</a>. Likewise, getting wifi connection up and running, so you can push code without a wired connection, is a single line of code.</p>
<hr />
<h3 style="text-align: center;">~20 Minutes from Parts to LED on!</h3>
<div id="attachment_702" style="width: 204px" class="wp-caption alignleft"><img aria-describedby="caption-attachment-702" loading="lazy" class="wp-image-702 " src="http://54.87.153.110/wp-content/uploads/2016/07/image6-225x300.png" alt="image6" width="194" height="261" /><p id="caption-attachment-702" class="wp-caption-text">JavaScript code running on my laptop, connects to the Tessel2 board via a USB cable, which makes the LED blink.</p></div>
<div id="attachment_666" style="width: 288px" class="wp-caption alignleft"><img aria-describedby="caption-attachment-666" loading="lazy" class="wp-image-666" src="http://54.87.153.110/wp-content/uploads/2016/07/Screen-Shot-2016-07-30-at-11.51.37-AM.png" alt="screenshot of webpage with controls for sumobot" width="278" height="211" /><p id="caption-attachment-666" class="wp-caption-text">Screenshot of the terminal. The red bar and the number to the right of it shows the current level of the dimmer switch that will control the LED brightness</p></div>
<div id="attachment_704" style="width: 214px" class="wp-caption alignleft"><a href="http://54.87.153.110/wp-content/uploads/2016/07/image7.png"><img aria-describedby="caption-attachment-704" loading="lazy" class="wp-image-704" src="http://54.87.153.110/wp-content/uploads/2016/07/image7-225x300.png" alt="image7" width="204" height="284" /></a><p id="caption-attachment-704" class="wp-caption-text">In this configuration, the brightness of the LED is reported back to the console and changed via a dimmer switch on the bread board.</p></div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr />
<h3 style="text-align: center;">Sumobots!</h3>
<p>After several smaller projects to practice writing and deploying code for the Tessel2, we build our main project, a sumobot. At the end of the day, there was a bot vs. bot bracket competition.</p>
<div id="attachment_665" style="width: 535px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/07/image4.jpg"><img aria-describedby="caption-attachment-665" loading="lazy" class="wp-image-665" src="http://54.87.153.110/wp-content/uploads/2016/07/image4.jpg" alt="sumobot" width="525" height="563" /></a><p id="caption-attachment-665" class="wp-caption-text">My sumobot. It might have won ugliest sumobot had that been a category. Rubber bands &gt; Elmers Glue for prototyping and impact sports.</p></div>
<div id="attachment_669" style="width: 631px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/07/Screen-Shot-2016-07-30-at-9.48.00-PM.png"><img aria-describedby="caption-attachment-669" loading="lazy" class="wp-image-669" src="http://54.87.153.110/wp-content/uploads/2016/07/Screen-Shot-2016-07-30-at-9.48.00-PM.png" alt="Screen Shot 2016-07-30 at 9.48.00 PM" width="621" height="106" /></a><p id="caption-attachment-669" class="wp-caption-text">The sumobot was controlled via a webpage served from the bot and running on my phone. This is a screenshot of those controls.</p></div>
<div id="attachment_674" style="width: 582px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/07/Nodebots_img_0283.jpg"><img aria-describedby="caption-attachment-674" loading="lazy" class="wp-image-674" src="http://54.87.153.110/wp-content/uploads/2016/07/Nodebots_img_0283.jpg" alt="Nodebots_img_0283" width="572" height="419" /></a><p id="caption-attachment-674" class="wp-caption-text">The object is to push the other bot off the platform. Someone is about to lose.</p></div>
<div id="attachment_706" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/07/image2.png"><img aria-describedby="caption-attachment-706" loading="lazy" class="wp-image-706 size-large" src="http://54.87.153.110/wp-content/uploads/2016/07/image2-1024x1024.png" alt="" width="640" height="640" srcset="/wp-content/uploads/2016/07/image2-1024x1024.png 1024w, /wp-content/uploads/2016/07/image2-150x150.png 150w, /wp-content/uploads/2016/07/image2-300x300.png 300w, /wp-content/uploads/2016/07/image2-250x250.png 250w, /wp-content/uploads/2016/07/image2-174x174.png 174w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-706" class="wp-caption-text">All the sumobots that took part in the competition.</p></div>
<hr />
<h3 style="text-align: center;">Instructions</h3>
<p>The following instructions should be all the information you need to try out a few small projects and then build a sumobot.</p>
<ul>
<li>Sparkfun sells a <a href="https://www.sparkfun.com/nodebots2016">kit</a> that looks to be everything I got at nodebots day and a extra pieces.</li>
<li><a href="http://-/ https://github.com/dtex/nbd2016">Slides</a> and code by Donovan Buck, who is also a contributor to Johnny-Five. These were presented by Don at the nodebot event and contain information on getting started with the Tessel2. Small code snippets for projects using LEDs and Temperature Sensors are included, as well as some of the information needed to make a sumobot.</li>
<li>The <a href="http://johnny-five.io/">Johnny-Five JavaScript library</a> is used for a variety of boards, including the Tessel2, to control components and sensors using simple and short Node.js commands. The name, of course, comes from the main character of the awesome 1980s robot movie, <a href="https://video.search.yahoo.com/video/play?p=short+circuit&amp;vid=e4950ccf787392775fe636d5472ba792&amp;turl=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOVP.V778995e347f8a355908ef04d2e3b9850%26pid%3D15.1%26h%3D227%26w%3D300%26c%3D7%26rs%3D1&amp;rurl=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DRBtRVjAMbVo&amp;tit=Short+Circuit+%281986%29+Original+Trailer&amp;c=8&amp;h=227&amp;w=300&amp;l=111&amp;sigr=11bea74jt&amp;sigt=11554fk08&amp;sigi=132mnnsfe&amp;ct=p&amp;age=1259992459&amp;fr2=p%3As%2Cv%3Av&amp;fr=mcafee&amp;tt=b">Short Circuit</a>. The JavaScript files in the Don&#8217;s presentation use Johnny-Five.<a href="http://johnny-five.io/"><img loading="lazy" class="aligncenter wp-image-675" src="http://54.87.153.110/wp-content/uploads/2016/07/johnny-five-fb.png" alt="johnny-five-fb" width="259" height="120" /></a></li>
<li>&#8216;Getting started&#8217; <a href="http://tessel.github.io/t2-start/">instructions</a> from Tessel. These are an additional reference point to what is in Don&#8217;s slides.</li>
<li>For the Sumobot control, I ended up not using the code linked to at the end of Don&#8217;s slides, but rather a <a href="https://github.com/ryanjgill/sumobot.git">repo</a> but together by Ryan Gill, who was at the event. I found Ryan&#8217;s code was easy to get running.</li>
<li>To install &amp; run Ryan&#8217;s sumobot code, I followed these steps (<em>Note: Node.js latest stable version, Tessel2 client, wifi connection, and wifi access point have already been installed and are running based on Don&#8217;s code in the first link</em>):</li>
</ul>
<p style="padding-left: 60px;"><span class="s1">1. Clone the directory: git clone https://github.com/ryanjgill/sumobot.git<br />
</span><span class="s1">2. CD into that directory.<br />
</span><span class="s1">3. In the terminal, type &#8220;npm install&#8221; while inside the directory to install dependencies.<br />
</span><span class="s1">4. Type &#8220;t2 run index.js&#8221;, which should start the program running.<br />
</span><span class="s1">5. At some point in the terminal, you should see &#8220;Server running at http://172./###.###.###:3000&#8221;, which is your bot&#8217;s IP and the port the webpage will be running on. Keep that information, you&#8217;ll need to put that in the browser later to control the bot.<br />
</span><span class="s1">6. Now you should push the code, so that it runs when the Tessel is not connected to your computer by USB. Type, &#8220;t2 push index.js&#8221; into the terminal. After it finishes loading, unplug the USB, switch to onboard battery power, and wait for the board to reboot and wifi to connect.<br />
</span><span class="s1">7. After the blue light on the left side of the tessel2 board is solid blue and the light in the ethernet plug area is solid green, change your computer or phone wifi to be the wifi access point of the bot. (Starting the wifi access point was a previous step described in Don&#8217;s slides mentioned above.) Navigate to the IP address and port from step #5 in your browser of choice. You should see a website that your bot is serving to you through the wifi connection. There will be buttons for forward, reverse, right, and left. Clicking on these buttons will trigger the JS code running on your bot and your bot will move.</span></p>
<hr />
<h3 style="text-align: center;">Lastly, thank you to the sponsors of this event.</h3>
<p>&nbsp;</p>
<p><a href="http://novetta.com/"><img loading="lazy" class="wp-image-676 size-medium aligncenter" src="http://54.87.153.110/wp-content/uploads/2016/07/novetta-300x62.png" alt="novetta" width="300" height="62" srcset="/wp-content/uploads/2016/07/novetta-300x62.png 300w, /wp-content/uploads/2016/07/novetta.png 800w" sizes="(max-width: 300px) 100vw, 300px" /></a>.</p>
<p>&nbsp;</p>
<p><a href="http://54.87.153.110/wp-content/uploads/2016/07/brandextract-splash.jpg"><img loading="lazy" class="size-full wp-image-696 aligncenter" src="http://54.87.153.110/wp-content/uploads/2016/07/brandextract-splash.jpg" alt="brandextract-splash" width="424" height="245" srcset="/wp-content/uploads/2016/07/brandextract-splash.jpg 424w, /wp-content/uploads/2016/07/brandextract-splash-300x173.jpg 300w" sizes="(max-width: 424px) 100vw, 424px" /></a><a href="http://54.87.153.110/wp-content/uploads/2016/07/brandextract-splash.jpg">    </a><a href="http://54.87.153.110/wp-content/uploads/2016/07/chaione_2.png"><img loading="lazy" class="aligncenter size-full wp-image-697" src="http://54.87.153.110/wp-content/uploads/2016/07/chaione_2.png" alt="chaione_2" width="492" height="264" srcset="/wp-content/uploads/2016/07/chaione_2.png 492w, /wp-content/uploads/2016/07/chaione_2-300x161.png 300w" sizes="(max-width: 492px) 100vw, 492px" /></a><a href="https://chaione.com/"><br />
</a></p>
<h3></h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3></h3>
<h3><a href="http://www.uh.edu/"><img loading="lazy" class="aligncenter wp-image-680 size-full" src="http://54.87.153.110/wp-content/uploads/2016/07/uhcs.jpg" alt="uhcs" width="257" height="91" /></a></h3>
<h3 style="text-align: center;"></h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3 style="text-align: center;"></h3>
<h3 style="text-align: center;">and the organizers:</h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p style="text-align: center;"><a href="http://54.87.153.110/wp-content/uploads/2016/07/nodejs-houston.png"><img loading="lazy" class="aligncenter size-full wp-image-681" src="http://54.87.153.110/wp-content/uploads/2016/07/nodejs-houston.png" alt="nodejs-houston" width="424" height="228" srcset="/wp-content/uploads/2016/07/nodejs-houston.png 424w, /wp-content/uploads/2016/07/nodejs-houston-300x161.png 300w" sizes="(max-width: 424px) 100vw, 424px" /></a></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/nodebots/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Gource &#8211; Log Visualization Tool</title>
		<link>/gource/</link>
					<comments>/gource/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Mon, 11 Jul 2016 02:54:38 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[data visualization]]></category>
		<category><![CDATA[Front-End]]></category>
		<category><![CDATA[Gource]]></category>
		<category><![CDATA[ISS]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[Javascript library]]></category>
		<category><![CDATA[NASA]]></category>
		<category><![CDATA[not open]]></category>
		<category><![CDATA[npm]]></category>
		<category><![CDATA[proprietary]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=607</guid>

					<description><![CDATA[At work, I put projects I complete into our group&#8217;s gallery of data-visualization work. It is good internal marketing for what our group can deliver. Unfortunately, even behind a NASA firewall, there are some things I can&#8217;t put in the gallery. Examples have included data visualizations of human resource data and<a class="moretag" href="/gource/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<p>At work, I put projects I complete into our group&#8217;s gallery of data-visualization work. It is good internal marketing for what our group can deliver. Unfortunately, even behind a NASA firewall, there are some things I can&#8217;t put in the gallery. Examples have included data visualizations of human resource data and financial data where the public release process is laid out by Congress.</p>
<p>One way to still have something cool to show but keep data secure is to turn the process of making the data visualization into another data visualization. One super easy way to do this is to use <a href="http://gource.io/">Gource</a>.</p>
<h3>Gource:</h3>
<p>My favorite thing about<a href="http://gource.io/"> Gource</a> is how easy it is to use. When I first downloaded it, I looked for instructions and couldn’t find any besides how to install it. Turns out, you just type “gource” into the folder of the code you want to visualize, and it does everything else. How great is that. If you use npm, you can install it using <em>npm install gource</em> -g in a terminal.</p>
<p>The small avatar(s) in the video shooting bolts of light are the developers of the project. Each file is a ball of light. Clusters of balls represent folders or directories.  The video is somewhat large, so it might take several seconds to load. If you want to see a Gource visualization of a larger project, check out <a href="https://www.youtube.com/watch?v=aPk1BqK8zzI" target="blank">this</a> youtube video of python development starting in 1990.</p>
<p><video style="visibility: visible;" src="http://54.87.153.110/wp-content/uploads/2016/07/ISSflyOver_1.mov" controls="controls" width="100%" height="100%"></video></p>
<p>Gource video of a small project I wrote while writing the <a href="https://54.87.153.110/issflyover/">previous blog post</a>. I used it to test out the open-notify API, which returns the current latitude and longitude of the International Space Station. The application then takes that lat/long and places it on a map using the <a href="http://leafletjs.com/">leaflet.js</a> library. Every 3 seconds, a new I.S.S. position is added.</p>
]]></content:encoded>
					
					<wfw:commentRss>/gource/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		<enclosure url="http://54.87.153.110/wp-content/uploads/2016/07/ISSflyOver_1.mov" length="7004377" type="video/quicktime" />

			</item>
		<item>
		<title>ISS Fly Over</title>
		<link>/issflyover/</link>
					<comments>/issflyover/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Sun, 26 Jun 2016 05:23:48 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[Front-End]]></category>
		<category><![CDATA[ISS]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[Javascript library]]></category>
		<category><![CDATA[leaflet.js]]></category>
		<category><![CDATA[NASA]]></category>
		<category><![CDATA[Online Map]]></category>
		<category><![CDATA[web development]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=530</guid>

					<description><![CDATA[ISS = International Space Station Earlier this week someone came into my office at work and asked to borrow three of our beanbags, so they could have recently returned astronauts sit in them while doing a facebook live-stream event. Apparently, it has become tradition. That prompted me to google ISS<a class="moretag" href="/issflyover/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<p><em>ISS = International Space Station</em></p>
<p>Earlier this week someone came into my office at work and asked to borrow three of our beanbags, so they could have recently returned astronauts sit in them while doing a facebook live-stream event. Apparently, it has become tradition. That prompted me to google ISS fly over application. I heard NASA had put out the code that runs their &#8220;check when the International Space Station will be in view from your location&#8221; webpage. Unfortunately, my impression wasn&#8217;t quite correct. What was provided wasn&#8217;t the code for their webpage or the application that does the calculations but merely an embed code snippet that lets you put an iframe in your own webpage to theirs. Basically, it is a well-built window from this webpage into their webpage.</p>
<blockquote><p><span style="color: #ff6600;">&lt;div</span> <span style="color: #008000;">style=&#8221;display: inline-block; border: 1px solid #CCC; border-radius: 6px; -webkit-border-radius: 6px; -o-border-radius: 6px; position: relative; overflow: hidden; width: 310px; height: 450px;</span>&#8220;<span style="color: #ff6600;">&gt;<br />
&lt;iframe</span> <span style="color: #ff6600;">src=</span>&#8220;<span style="color: #800080;">https://spotthestation.nasa.gov/widget/widget.cfm?country=United_States&amp;amp;region=Texas&amp;amp;city=Houston</span>&#8221; <span style="color: #008000;">width=&#8221;310&#8243; height=&#8221;450&#8243; frameborder=&#8221;0&#8243;</span>&gt;<span style="color: #ff6600;">&lt;/iframe&amp;gt&amp;lt/div&gt;</span></p></blockquote>
<p><span style="color: #ff6600;">Orange</span> = HTML, the pieces that make up the webpage. Boxes inside boxes with rules about where those boxes sit and their properties.</p>
<p><span style="color: #800080;">Purple</span> = URL, or address the browser goes to in order to ask politely for the NASA data to build the little ISS flyover screen.</p>
<p><span style="color: #008000;">Green</span> = CSS, the style rules.</p>
<div style="display: block; margin: 0 auto; text-align: center; border: 1px solid #CCC; border-radius: 6px; -webkit-border-radius: 6px; -o-border-radius: 6px; position: relative; overflow: hidden; width: 310px; height: 450px;"><iframe loading="lazy" src="https://spotthestation.nasa.gov/widget/widget.cfm?country=United_States&amp;region=Texas&amp;city=Houston" width="310" height="450" frameborder="0"></iframe></div>
<p>&nbsp;</p>
<div>
<p>After googling around a bit, I found a different ISS flyover resource called <a href="http://open-notify.org/">OpenNotify</a>. Born from a hackathon, by <a href="mailto:nathan@open-notify.org">Nathan Bergey</a>, this site provides latitude and longitude, next station pass for your location, and the number of people in space. Instead of using an iframe, it uses an <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a>. This means, instead of being a window to another webpage like the iframe method, your webpage is sending a question to another server that responds with some information.</p>
</div>
<p>For example, we can get second by second updates on the lat and long of the International Space Station below.</p>
<p style="text-align: center; background-color: lightgray;">The ISS is currently over <span id="isslat">?</span>° N, <span id="isslon">?</span>° E</p>
<p style="text-align: left;">The line above is generated using the following code:</p>
<blockquote>
<p style="text-align: left;"><span style="color: #ff6600;">&lt;p</span> <span style="color: #008000;">style=&#8221;text-align: center;&#8221;</span><span style="color: #ff6600;">&gt;</span>The ISS is currently over <span style="color: #ff6600;">&lt;span id=&#8221;isslat&#8221;&gt;</span>?<span style="color: #ff6600;">&lt;/span&gt;</span>° N, <span style="color: #ff6600;">&lt;span id=&#8221;isslon&#8221;&gt;</span>?<span style="color: #ff6600;">&lt;/span&gt;</span>° E<span style="color: #ff6600;">&lt;/p&gt;</span></p>
<p style="text-align: left;"><span style="color: #ff6600;">&lt;script src=&#8221;<span style="color: #800080;">https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js</span>&#8220;&gt;&lt;/script&gt;</span></p>
<p style="text-align: left;"><span style="color: #ff6600;">&lt;script&gt;</span><br />
<span style="color: #3366ff;">     function getISS () { $.getJSON(&#8216;</span><span style="color: #800080;">http://api.open-notify.org/iss-now.json?callback=?&#8217;, </span></p>
<p style="text-align: left;"><span style="color: #800080;"><span style="color: #3366ff;">          function(data) { var lat = data[&#8216;iss_position&#8217;][&#8216;latitude&#8217;]; var lon = data[&#8216;iss_position&#8217;][&#8216;longitude&#8217;];</span></span></p>
<p style="text-align: left;"><span style="color: #3366ff;">                    $(&#8216;#isslat&#8217;).html(Math.round(lat*1000)/1000.0); $(&#8216;#isslon&#8217;).html(Math.round(lon*1000)/1000.0); </span></p>
<p style="text-align: left;"><span style="color: #3366ff;">          });</span></p>
<p style="text-align: left;"><span style="color: #3366ff;">     setTimeout(getISS, 3000); } </span></p>
<p style="text-align: left;"><span style="color: #3366ff;">     getISS();</span></p>
<p style="text-align: left;"><span style="color: #ff6600;">&lt;/script&gt;</span></p>
</blockquote>
<p style="text-align: left;">Similarly to the first code block, there is html (<span style="color: #ff6600;">orange</span>), an URL (<span style="color: #800080;">purple</span>), and CSS (<span style="color: #008000;">green</span>). What is different is between the second pair of &lt;&gt;opening and &lt;/&gt;closing orange &lt;script&gt; tags we also have some <span style="color: #3366ff;">JavaScript code in blue</span>. JavasScript is the computer language that runs in your browser. You may or may not have python or some other language installed on your computer (perhaps as a default install by the company you bought it from), but any computer with a browser can run JavaScript. This particular JavaScript script does three things.</p>
<ul>
<li style="text-align: left;">First, &#8220;<span style="color: #3366ff;"><span style="text-decoration: underline;">function getISS ()</span></span>&#8221;  establishes the name of the function, &#8220;<span style="color: #3366ff;">getISS</span>&#8220;. What is between the <span style="color: #3366ff;">{ }</span> directly after <span style="color: #3366ff;">function getISS ()</span> is the code that runs when the function is called. In the last blue line, the function name <span style="color: #3366ff;">getISS()</span> is called and the function executes.</li>
<li style="text-align: left;">Next, inside the getISS function is <span style="color: #3366ff;">$.getJSON</span>. The $ sign tells a library called Jquery to run. Jquery was previously downloaded to run locally using <span style="color: #ff6600;">&lt;script src=&#8221;<span style="color: #800080;">https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js</span>&#8220;&gt;&lt;/script&gt;<span style="color: #000000;">. <span style="color: #333333;">Jquery knows that </span><span style="color: #3366ff;">$.getJSON</span> <span style="color: #333333;">means to send a request to the following</span> <span style="color: #800080;">URL in purple</span> <span style="color: #333333;">and expect to get JSON formatted data back from that server. </span></span></span></li>
<li style="text-align: left;"><span style="color: #ff6600;"><span style="color: #000000;"><span style="color: #333333;">The next JavaScript function in blue (<span style="color: #800080;"><span style="color: #3366ff;">function(data) { var lat = data[&#8216;iss_position&#8217;][&#8216;latitude&#8217;]; var lon = data[&#8216;iss_position&#8217;][&#8216;longitude&#8217;];</span></span> ) takes that JSON data, labeled here as &#8220;<span style="color: #3366ff;">data</span>&#8220;, pulls out the parts representing lat and long and turns them into variables we can use later in the code. </span></span></span></li>
<li style="text-align: left;"><span style="color: #ff6600;"><span style="color: #000000;"><span style="color: #333333;">Those two variables are referred to in the next bit of JavaScript (<span style="color: #3366ff;">$(&#8216;#isslat&#8217;).html(Math.round(lat*1000)/1000.0); $(&#8216;#isslon&#8217;).html(Math.round(lon*1000)/1000.0); }); <span style="color: #333333;">) where the variables are changed into easier to read format using some math and then switched out in place of for the &#8220;<span style="color: #ff6600;">?</span>&#8221; in the following HTML (<span style="color: #ff6600;">&lt;span id=&#8221;isslat&#8221;&gt;</span>?<span style="color: #ff6600;">&lt;/span&gt;</span>° N, <span style="color: #ff6600;">&lt;span id=&#8221;isslon&#8221;&gt;</span>?<span style="color: #ff6600;">&lt;/span&gt;</span>) the script knows where to put them as the <span style="color: #3366ff;">#</span> in the script is equivalent to the <span style="color: #ff6600;">id=</span> in html. </span></span></span></span></span></li>
</ul>
<h3 style="text-align: left;">Leaflet.js</h3>
<p>Regenerating lat and long as digits is kinda boring though, so we&#8217;re going to put those on a map so we can see exactly where the ISS is over right now. We&#8217;re also going to have the map add a new marker every three seconds to get an idea just how fast the ISS is moving. We&#8217;re going to do this with another JavaScript library called <a href="http://leafletjs.com/">leaflet.js</a>.</p>
<p>Here it is at a large scale. Note, it initially takes three to five seconds for the first ISS lat and long position to load to the map. If you zoom in, you can more clearly see the ISS moving. If you leave it up for a while, you&#8217;ll get a line of markers stringing across the globe, which gives you a good idea how fast 17,150 miles per hour or slightly more than 5 miles a second actually is. The Space Station orbits Earth once every 92 minutes.</p>
<div><iframe loading="lazy" src="https://54.87.153.110/ISSflyOver/" width="600" height="300" frameborder="0" seamless="seamless">Browser not compatible.</iframe></div>
<div id="mapidC" class="maps center"></div>
<p><script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script><script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js"></script></p>
<p><script>// <![CDATA[
var map_1 = {"issLat":0,"issLong":0}
var ISSmarkers = [];


function getISS () {
		    $.getJSON('http://api.open-notify.org/iss-now.json?callback=?', function(data) {
		        var lat = data['iss_position']['latitude'];
		        var lon = data['iss_position']['longitude'];
		        $('#isslat').html(Math.round(lat*1000)/1000.0);
		        $('#isslon').html(Math.round(lon*1000)/1000.0);

		        window.map_1["issLat"]=(Math.round(lat*1000)/1000.0);
		        window.map_1["issLong"]=(Math.round(lon*1000)/1000.0)
		        console.log("ISSmarkers = ",ISSmarkers)

		    });
    	setTimeout(getISS, 3000); 
		}
		getISS();

var mymap = L.map('mapid').setView([map_1["issLat"], map_1["issLong"]], 3);

			L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/256/{z}/{x}/{y}?access_token={accessToken}',
			{
		    attribution: 'Map data &copy; <a href="http://openstreetmap.org/">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com/">Mapbox</a>',
		    maxZoom: 20,
		    level: 20,
		    id: 'jgosses',
		    accessToken: 'pk.eyJ1Ijoiamdvc3NlcyIsImEiOiJjaWk2aWhua2kwMWxidDBrZndhbHBraTd1In0.IIT7dwztvQhH9ZsiOLmnMg'
		}).addTo(mymap);

var marker = L.marker([map_1["issLat"], map_1["issLong"]]).addTo(mymap);
// ]]&gt;</script></p>
]]></content:encoded>
					
					<wfw:commentRss>/issflyover/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Space City JavaScript Conference</title>
		<link>/space-city-javascript-conference/</link>
					<comments>/space-city-javascript-conference/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Sun, 15 May 2016 02:18:21 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[conference]]></category>
		<category><![CDATA[Front-End]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[learning]]></category>
		<category><![CDATA[Opinion]]></category>
		<category><![CDATA[web development]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=510</guid>

					<description><![CDATA[A Post-Conference Review of Space City JS I just got back from Space City JS, a JavaScript conference in Houston, Texas. Ideally, I&#8217;d write an intelligent piece of prose after long reflection. My schedule doesn&#8217;t allow for that, so here are some bullet points. The coffee was strong! and more<a class="moretag" href="/space-city-javascript-conference/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<h3 style="text-align: center;">A Post-Conference Review</h3>
<h3 style="text-align: center;">of</h3>
<h3 style="text-align: center;"><a href="http://www.spacecity.codes/#">Space City JS</a></h3>
<p><a href="http://www.spacecity.codes/#"><img loading="lazy" class="aligncenter wp-image-512" src="http://54.87.153.110/wp-content/uploads/2016/05/SpaceCityJS.png" alt="Space City JS Logo" width="228" height="234" /></a></p>
<p>I just got back from Space City JS, a JavaScript conference in Houston, Texas. Ideally, I&#8217;d write an intelligent piece of prose after long reflection. My schedule doesn&#8217;t allow for that, so here are some bullet points.</p>
<ul>
<li>The coffee was strong! and more than cream and sugar was provided if you wanted to get fancy. Katz coffee sponsored. They also sponsor the Buffalo Bayou Regatta every year.</li>
<li>This was only the second year of the conference. The number of people participating was mentioned as evidence of the small but growing Houston tech scene.</li>
<li>As compared to a scientific conference where talks are super specific, the pattern was for talks to be accessible by those with moderate amounts of topic-specific knowledge. The goal was less description and more inspiration and demonstration.</li>
<li>One thing JavaScript certainly has going for it over the other languages is an active community of people in Houston who are willing to share their time and expertise with others.</li>
<li>Hearing about new tools and libraries that experienced people find useful and think will grow in the future is useful knowledge for someone, like myself, making decisions about what things to learn.</li>
<li>You leave with nice looking stickers &amp; t-shirts.</li>
<li>The conference was sponsored by 4 local breweries, which seemed excessive for a small conference, but can you ever have too many breweries sponsoring your event?</li>
<li>There were just the right number of interesting talks. The subjects included connecting APIs, databases specifically built for real-time applications, using Node.js at NASA to overcome data silos, and contributing to open-source both from the contributor perspective and the project originator perspective.</li>
<li>Brisket for lunch! Truly, there&#8217;s no point in having a conference in Texas if you don&#8217;t serve tacos or brisket.</li>
</ul>
<div id="attachment_511" style="width: 650px" class="wp-caption aligncenter"><a href="http://54.87.153.110/wp-content/uploads/2016/05/image1-e1463279039183.jpg"><img aria-describedby="caption-attachment-511" loading="lazy" class="wp-image-511 size-large" src="http://54.87.153.110/wp-content/uploads/2016/05/image1-e1463350097764-1024x1024.jpg" alt="post-it note of Space City JS version of NASA logo" width="640" height="640" srcset="/wp-content/uploads/2016/05/image1-e1463350097764-1024x1024.jpg 1024w, /wp-content/uploads/2016/05/image1-e1463350097764-150x150.jpg 150w, /wp-content/uploads/2016/05/image1-e1463350097764-300x300.jpg 300w, /wp-content/uploads/2016/05/image1-e1463350097764-250x250.jpg 250w, /wp-content/uploads/2016/05/image1-e1463350097764-174x174.jpg 174w, /wp-content/uploads/2016/05/image1-e1463350097764.jpg 1280w" sizes="(max-width: 640px) 100vw, 640px" /></a><p id="caption-attachment-511" class="wp-caption-text">A copyright infringing merger of Space City JS (S.C.J.S.) and the NASA logo made with Post-it notes.</p></div>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/space-city-javascript-conference/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Data Visualization Compilations</title>
		<link>/data-visualization-compilations/</link>
					<comments>/data-visualization-compilations/#respond</comments>
		
		<dc:creator><![CDATA[Justin]]></dc:creator>
		<pubDate>Sun, 27 Mar 2016 04:40:19 +0000</pubDate>
				<category><![CDATA[code]]></category>
		<category><![CDATA[CartoDB]]></category>
		<category><![CDATA[CSS]]></category>
		<category><![CDATA[Front-End]]></category>
		<category><![CDATA[HTML]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[learning]]></category>
		<category><![CDATA[mapbox]]></category>
		<category><![CDATA[Online Map]]></category>
		<category><![CDATA[Online Mapping]]></category>
		<category><![CDATA[web development]]></category>
		<guid isPermaLink="false">https://54.87.153.110/?p=453</guid>

					<description><![CDATA[A Compilation of Data Visualization Compilations: There are a wide variety of tools out there for data visualization. Some nice people have come up with compilations of their favorite tools. Other people have created galleries of really outstanding data visualizations that you can use as inspiration. Over the past year,<a class="moretag" href="/data-visualization-compilations/"> Read more&#8230;</a>]]></description>
										<content:encoded><![CDATA[<h3>A Compilation of Data Visualization Compilations:</h3>
<p>There are a wide variety of tools out there for data visualization. Some nice people have come up with compilations of their favorite tools. Other people have created galleries of really outstanding data visualizations that you can use as inspiration. Over the past year, I&#8217;ve bookmarked a lot of them. This post is a curated compilation of compilations. If you&#8217;re interested in learning about data visualization on the web, this post might save you some time digging around the internet. Alternatively, it might be a massive time sink.</p>
<h3>Catalog of Data Visualization Types:</h3>
<h4><a href="http://www.datavizcatalogue.com/" target="_blank">Dataviz Catalogue</a></h4>
<p>This is a great site for thinking about, or discussing with others, the various advantages and disadvantages of different data visualization styles. Not sure what data visualization style to use for a dataset that is hierarchal? This site might help you put things into a conceptual framework and make a decision.</p>
<hr />
<p>&nbsp;</p>
<p><iframe loading="lazy" src="http://www.datavizcatalogue.com/" width="900" height="400">Your browser does not support iframes.</iframe></p>
<hr />
<h3>Three Compilations of Data Visualization Tools:</h3>
<p><a href="http://selection.datavisualization.ch/" target="_blank">Data Visualization</a><br />
A fairly extensive compilation of data visualization tools:</p>
<hr />
<p><iframe loading="lazy" src="http://selection.datavisualization.ch/" width="900" height="300">Your browser does not support iframes.</iframe></p>
<hr />
<h4></h4>
<h4><a href="http://www.visualisingdata.com/">Visualizing Data</a></h4>
<p>Another extensive compilation of data visualization tools. It is definitely worth a visit. Between this one and the one above, there isn&#8217;t much not covered.</p>
<h4><a href="http://10-open-source-projects-every-javascript-geo-dev-should-know-about/">10-open-source-projects-every-javascript-geo-dev-should-know-about</a></h4>
<p>This post on the ESRI blog is worth a look over, especially if you have map data locked into ESRI applications but want to do things in a more developer-centric and less GUI fashion.</p>
<h3>Galleries of Data Visualization Examples:</h3>
<h5 class="p1"><a href="http://Scientific/ Visualization Studio">Scientific Visualization Studio</a></h5>
<p class="p1"><span class="s1">The Scientific Visualization Studio is out of NASA&#8217;s Goddard Space Flight Center. They make animated 2D and 3D visualizations. These look amazing on very large screens, especially if you have higher than normal resolution.  Download and run locally, rather than using the youtube player, to get the best picture possible. </span></p>
<h5 class="p1"><a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank">D3.js Visual Index</a></h5>
<p>There are a lot of data visualization libraries written in the JavaScript language. D3.js is the reigning champion. D3 (or Data Driven Documents) favors configuration over convention. The advantages are that it is very flexible and powerful. The disadvantage is it has more of a learning curve compared to other JavaScript data visualization libraries that favor convention.</p>
<h5><a href="http://bl.ocks.org/" target="_blank">Blocks</a> (D3.js)</h5>
<p class="p1"><span class="s1">Bl.ocks (pronounced “Blocks”) is a simple viewer for sharing code examples hosted on <a href="https://gist.github.com/"><span class="s2">GitHub Gist</span></a>. Anyone can use it to easily display their d3 visualizations. If you go to &#8220;popular&#8221; tab in the upper right corner of the Blocks website, you can see some of the most population visualization on Blocks.</span></p>
<p><a href="http://collection.marijerooze.nl/" target="_blank">collection.marijerooze.nl</a></p>
<p>A collection of over 465 data visualizations put together by Marije Rooze, an Amsterdam based front-end developer. Examples largely come from the NYTimes and Guardian newspapers. The ability to filter makes it a good way to find examples.</p>
<h5><a href="http://stamen.com/work/" target="_blank">Stamen</a></h5>
<p>A design studio focused on data visualization and mapping, Stamen produces some amazingly beautiful products for big clients like National Geographic. Definitely check them out if you have a map focus and want to be inspired/humbled.</p>
<h5><a href="http://roadtolarissa.com/" target="_blank">Road To Larissa</a></h5>
<p>A gallery of data visualizations made by Adam Pearce of Bloomberg Graphics.</p>
<h5><a href="http://www.smallmeans.com/new-york-times-infographics/" target="_blank">SmallMeans</a></h5>
<p>A gallery of favorited NYTimes graphics by a software engineering student.</p>
<h3>Data Visualization Blogs:</h3>
<h5><a href="http://flowingdata.com/" target="_blank">Flowing Data</a></h5>
<p>I suspect this is one of the most popular data visualization websites. It is the only one I have seen pop-up in my facebook feed several times</p>
<h5><a href="http://www.informationisbeautiful.net/" target="_blank">Information is Beautiful</a></h5>
<p>Run by David McCandless. This website has data visualization &#8220;best of&#8221; contests and lots of generally cool data visualizations.</p>
<h5><a href="http://feltron.com/">Nicholas Felton (website)</a></h5>
<p>More infographics than data visualizations, a big name worth checking out.</p>
<p><a href="http://feltron.tumblr.com/">Nicholar Felton (tumblr)</a></p>
<p>A curated selection put together by Felton. These are pieces of art as much as they are data visualizations.</p>
<p><a href="http://www.visualcinnamon.com/">Visual Cinnamon</a></p>
<p>Personal webpage of Nadieh Bremer who, in her own words, is a Astronomer-turned-Data-Scientist-turned-self-taught-Data-Visualization-Designer. In addition to her own work, which is stunning, she has a well curated list of internet resources and books on data visualization.</p>
<p><a href="http://fellinlovewithdata.com/" target="_blank">Fell In Love With Data</a></p>
<p>Not just pretty pictures, this blog has some excellent writing about what makes for good data visualizations. FILWD is edited by<a href="http://enrico.bertini.io/">Enrico Bertini</a>, Assistant Professor at the <a href="http://engineering.nyu.edu/">NYU Tandon School of Engineering</a>. He also has a podcast, <a href="http://datastori.es/">Data Stories</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/data-visualization-compilations/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
